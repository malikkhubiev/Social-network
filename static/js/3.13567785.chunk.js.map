{"version":3,"sources":["components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/DialogMessage/DialogMessage.module.css","components/Dialogs/Dialogs.module.css","components/common/Selectors/dialogs-selectors.ts","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/DialogMessage/DialogMessage.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","getUsersSel","state","dialogsPage","users","DialogItem","props","path","id","className","d","dialog","dialogAva","to","name","DialogMessage","message","AddMessageForm","initialValues","onSubmit","values","setSubmitting","addNewMessage","isSubmitting","type","placeholder","disabled","compose","withAuthRedirect","useSelector","getUserId","shouldDialogBoxBeOpened","getShouldBe","messages","getMessages","userId","useRouteMatch","params","dispatch","useDispatch","myGetUser","getUser","useEffect","getUsers","undefined","messagesElements","dialogsElements","map","item","key","length","Dialogs","DialogsItems","DialogMessages","DialogMessagesItems","DialogNoMessages","sendMessage"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,OAAS,2BAA2B,UAAY,gC,oBCAlED,EAAOC,QAAU,CAAC,QAAU,iC,oBCA5BD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,eAAiB,gCAAgC,oBAAsB,qCAAqC,iBAAmB,kCAAkC,sBAAwB,uCAAuC,2BAA6B,4CAA4C,4BAA8B,+C,mHCC5ZC,EAAc,SAACC,GAAD,OAAsBA,EAAMC,YAAYC,O,kCCMtDC,EAAiC,SAACC,GAC3C,IAAIC,EAAI,mBAAeD,EAAME,IAC7B,OACI,yBAAKC,UAAWC,IAAEC,QAAQ,yBAAKF,UAAWC,IAAEE,YAAiB,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,Q,kBCLlFC,EAAqC,SAACT,GAC/C,OACI,yBAAKG,UAAWC,IAAEM,SAAUV,EAAMU,U,kBCUpCC,EAA2D,SAACX,GAK9D,OACI,kBAAC,IAAD,CACIY,cAAe,CAAEF,QAAS,IAC1BG,SAPO,SAACC,EAAD,GAAwG,IAA/EC,EAA8E,EAA9EA,cACpCf,EAAMgB,cAAc,CAACN,QAASI,EAAOJ,UACrCK,GAAc,MAOT,gBAAGE,EAAH,EAAGA,aAAH,OACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,OAAOV,KAAK,UAAUW,YAAY,wBAC9C,4BAAQD,KAAK,SAASE,SAAUH,GAAhC,aC1BLI,sBACXC,IADWD,EDmCsB,SAACrB,GAElC,IAAIE,EAAKqB,YAAYC,KACjBC,EAA0BF,YAAYG,KACtC5B,EAAQyB,YAAY5B,GACpBgC,EAAWJ,YAAYK,KAGvBC,EAA6BC,cAAgBC,OAAOF,OAElDG,EAAWC,cAEXC,EAAY,SAACL,GAA8BG,EAASG,YAAQN,KAGlEO,qBAAU,WAFiBJ,EAASK,eAK5BH,OADWI,IAAXT,EACUA,EAEA,QAEf,CAACA,IAGJ,IACIU,EADAC,EAA0B1C,EAAM2C,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAYC,IAAKD,EAAKxC,GAAIA,GAAIwC,EAAKxC,GAAIM,KAAMkC,EAAKlC,UAI9F+B,OADaD,IAAbX,GAA0BA,EAASiB,OAChBjB,EAASc,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAeC,IAAKD,EAAKxC,GAAIQ,QAASgC,EAAKhC,aAEhE,8CAIvB,OACI,yBAAKP,UAAWC,IAAEyC,SACd,yBAAK1C,UAAWC,IAAE0C,cACbN,IAEwB,IAA5Bf,QAAkDa,IAAbX,EAAyB,yBAAKxB,UAAWC,IAAE2C,gBAC7E,yBAAK5C,UAAWwB,EAASiB,OAASxC,IAAE4C,oBAAsB5C,IAAE6C,kBACvDV,GAEL,kBAAC,EAAD,CAAgBvB,cAVQ,SAAC,GAAe,IAAdN,EAAa,EAAbA,QAAesB,EAASkB,YAAYhD,EAAIQ,QAW7D","file":"static/js/3.13567785.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__3x-Nv\",\"dialogAva\":\"DialogItem_dialogAva__32AC9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"DialogMessage_message__3rW41\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialogs\":\"Dialogs_Dialogs__11Ji_\",\"DialogsItems\":\"Dialogs_DialogsItems__3yZAy\",\"DialogMessages\":\"Dialogs_DialogMessages__3KxVY\",\"DialogMessagesItems\":\"Dialogs_DialogMessagesItems__1M9OC\",\"DialogNoMessages\":\"Dialogs_DialogNoMessages__31Tdo\",\"DialogMessagesWriting\":\"Dialogs_DialogMessagesWriting__3GKSi\",\"DialogMessagesWritingInput\":\"Dialogs_DialogMessagesWritingInput__1MyT0\",\"DialogMessagesWritingButton\":\"Dialogs_DialogMessagesWritingButton__2z2dK\"};","import { StateType } from \"../../../redux/redux-store\";\r\n\r\nexport const getUsersSel = (state: StateType) => state.dialogsPage.users","import React from 'react'\r\nimport d from './DialogItem.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport const DialogItem:React.FC<PropsType> = (props) => {\r\n    let path = `/dialogs/${props.id}`\r\n    return (\r\n        <div className={d.dialog}><div className={d.dialogAva}></div><NavLink to={path}>{props.name}</NavLink></div>\r\n    )\r\n}","import React from 'react'\r\nimport d from './DialogMessage.module.css'\r\n\r\ntype PropstType = {\r\n    message: string\r\n}\r\nexport const DialogMessage:React.FC<PropstType> = (props) => {\r\n    return (\r\n        <div className={d.message}>{props.message}</div>\r\n    )\r\n}","import { Field, Form, Formik } from \"formik\"\r\nimport React, { useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useRouteMatch } from \"react-router-dom\"\r\nimport { getUsers } from \"../../redux/dialogs-reducer\"\r\nimport { getUser, sendMessage } from \"../../redux/profile-reducer\"\r\nimport { getUsersSel } from \"../common/Selectors/dialogs-selectors\"\r\nimport { getMessages, getShouldBe, getUserId } from \"../common/Selectors/profile-selectors\"\r\nimport { DialogItem } from \"./DialogItem/DialogItem\"\r\nimport { DialogMessage } from \"./DialogMessage/DialogMessage\"\r\nimport d from \"./Dialogs.module.css\"\r\n\r\ntype FormDataType = {\r\n    message: string\r\n}\r\n\r\ntype addNewMessage = ({message}:FormDataType) => void\r\n\r\nconst AddMessageForm: React.FC<{addNewMessage: addNewMessage}> = (props) => {\r\n    const submit = (values: FormDataType, { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }): void => {\r\n        props.addNewMessage({message: values.message})\r\n        setSubmitting(false)\r\n    }\r\n    return (\r\n        <Formik\r\n            initialValues={{ message: \"\" }}\r\n            onSubmit={submit}\r\n        >\r\n            {({ isSubmitting }) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"message\" placeholder=\"write me something:\" />\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Send\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport const Dialogs: React.FC<{}> = (props) => {\r\n\r\n    let id = useSelector(getUserId)\r\n    let shouldDialogBoxBeOpened = useSelector(getShouldBe)\r\n    let users = useSelector(getUsersSel)\r\n    let messages = useSelector(getMessages)\r\n\r\n    // @ts-ignore\r\n    let userId: string | undefined = useRouteMatch().params.userId\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const myGetUser = (userId: number | string) => { dispatch(getUser(userId)) }\r\n    const myGetUsers = () => { dispatch(getUsers()) }\r\n\r\n    useEffect(() => {\r\n        myGetUsers()\r\n        if (userId !== undefined) {\r\n            myGetUser(userId)\r\n        } else {\r\n            myGetUser('-1')\r\n        }\r\n    }, [userId])\r\n\r\n    // @ts-ignore\r\n    let dialogsElements: object = users.map(item => <DialogItem key={item.id} id={item.id} name={item.name} />)\r\n    let messagesElements: object | string\r\n\r\n    if (messages !== undefined && messages.length) {\r\n        messagesElements = messages.map(item => <DialogMessage key={item.id} message={item.message} />)\r\n    } else {\r\n        messagesElements = 'This is the beginning of your communication'\r\n    }\r\n\r\n    const addNewMessage:addNewMessage = ({message}) => { dispatch(sendMessage(id, message)) }\r\n    return (\r\n        <div className={d.Dialogs}>\r\n            <div className={d.DialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            {shouldDialogBoxBeOpened !== false && messages !== undefined ? <div className={d.DialogMessages}>\r\n                <div className={messages.length ? d.DialogMessagesItems : d.DialogNoMessages}>\r\n                    {messagesElements}\r\n                </div>\r\n                <AddMessageForm addNewMessage={addNewMessage} />\r\n            </div> : null}\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport { compose } from \"redux\"\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\"\r\nimport { Dialogs } from \"./Dialogs\"\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n)(Dialogs)"],"sourceRoot":""}