{"version":3,"sources":["DATA/usersDATA.ts","hoc/withAuthRedirect.tsx","components/Header/Header.module.css","components/Profile/Profile.module.css","components/Profile/Person/Person.module.css","components/NavBar/NavBar.module.css","serviceWorker.js","DATA/authDATA.ts","api/auth-api.ts","redux/auth-reducer.ts","redux/navbar-reducer.ts","redux/redux-store.ts","images/logo.png","components/Header/Header.tsx","components/Header/HeaderComponent.tsx","utils/validators.ts","components/common/FormsControlls/FormsControlls.tsx","components/Login/Login.tsx","components/common/Selectors/navbar-selectors.ts","components/NavBar/FriendsItem/FriendsItem.tsx","components/NavBar/NavBar.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","images/brain.jpg","components/Profile/Person/PersonStatus.tsx","components/Profile/Person/Person.tsx","components/Profile/Profile.tsx","components/Profile/ProfileComponent.tsx","hoc/withSuspense.tsx","App.tsx","index.js","api/profile-api.ts","redux/profile-reducer.ts","components/common/Selectors/profile-selectors.ts","components/common/Selectors/auth-selectors.ts","api/users-api.ts","components/Profile/MyPosts/MyPosts.module.css","components/common/FormsControlls/FormsControlls.module.css","components/Profile/MyPosts/Post/Post.module.css","redux/users-reducer.ts","components/NavBar/FriendsItem/FriendsItem.module.css","components/Login/Login.module.css","redux/dialogs-reducer.ts"],"names":["mainUser","id","name","aboutMe","status","lookingForAJob","isMainUser","posts","shouldDialogBoxBeOpened","users","followed","message","likes","messages","withAuthRedirect","WrappedComponent","connect","mapStateToProps","props","isAuth","restProps","to","state","getIsAuth","module","exports","Boolean","window","location","hostname","match","authData","email","password","rememberMe","authAPI","loginData","callBack","counter","map","obj","length","SET_AUTH_USER_DATA","REM_AUTH_USER_DATA","SET_FIVE","initialState","actions","data","type","friends","reducers","combineReducers","profilePage","profileReducer","navbarPage","dialogsPage","dialogsReducer","usersPage","usersReducer","auth","action","num","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Header","dispatch","useDispatch","useSelector","getUserName","className","h","header","src","logo","alt","onClick","HeaderComponent","useEffect","pageNumber","filter","getUsers","required","value","Input","input","meta","hasError","touched","error","styles","formDiv","Checkbox","checkbox","createField","placeholder","validate","component","Field","LoginReduxForm","reduxForm","onSubmit","handleSubmit","style","summaryError","Login","sectionLogin","formData","result","prom","userName","credentials","stopSubmit","_error","LoginSanka","getFriends","FriendsItem","f","friendsItem","friendsItemImg","friendsItemName","NavBar","friendsElements","key","n","nav","list","activeClassName","newCl","friendsHeader","friendsItems","Post","p","postsPost","postsPostImg","postsPostTxt","postsPostLike","AddNewPostForm","initialValues","postText","values","setSubmitting","myAddPost","isSubmitting","disabled","MyPosts","getPosts","getIsMainUser","postsElements","reverse","postsArea","postsMenu","postsMenuHeader","addPost","postsHeader","PersonStatus","useState","editMode","setEditMode","getStatus","setStatus","person","personStatus","onDoubleClick","onChange","e","text","target","autoFocus","onBlur","changeStatus","Person","profile","getProfile","personTopimg","personData","ava","personDataAva","personDataDesc","personDataDescName","personDataDescDesc","Profile","ProfileComponent","userId","useRouteMatch","params","myGetUser","getUser","undefined","mainContent","withSuspense","Suspense","fallback","DialogsContainer","React","lazy","UsersComponent","DialogsContainerComp","UsersComponentComp","App","exact","path","render","rerenderEntireTree","ReactDOM","document","getElementById","subscribe","getState","navigator","serviceWorker","ready","then","registration","unregister","catch","console","profileAPI","postMessage","usersData","user","sendedMessage","searchedUser","push","SET_PROFILE","sendMessage","post","getUserId","getShouldBe","getMessages","usersAPI","firstResultArray","term","includes","follow","followedUserId","unFollow","SET_USERS","SET_TOTAL_USERS_COUNT","SET_CURRENT_PAGE","TOGGLE_IS_FETCHING","SET_FILTER","totalUsersCount","pageSize","currentPage","isFetching","totalCount"],"mappings":"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","file":"static/js/main.abe57ef6.chunk.js","sourcesContent":["import { mainUserType } from './../types/types';\r\nimport { UserType } from \"../types/types\";\r\n\r\nexport const mainUser:mainUserType = {\r\n    id: -1,\r\n    name: \"Malik\",\r\n    aboutMe: \"Я Front-end разработчик\",\r\n    status: \"Double click me!\",\r\n    lookingForAJob: true,\r\n    isMainUser: true,\r\n    posts: [],\r\n    shouldDialogBoxBeOpened: false,\r\n}\r\n\r\ntype UsersType = Array<UserType>;\r\nexport const users:UsersType = [\r\n    {\r\n        id: 0,\r\n        name: \"Alex\",\r\n        aboutMe: 'Давайте жить дружно',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: false,\r\n        posts: [\r\n            { id: 0, message: \"Hi!\", likes: 5 },\r\n            { id: 1, message: \"Life is so beautiful\", likes: 12 },\r\n        ],\r\n        messages: [\r\n            { id: 0, message: \"Hi!\"},\r\n            { id: 1, message: \"How are you?\"},\r\n        ],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 1,\r\n        name: 'Billy',\r\n        aboutMe: 'Доброта спасёт мир!!!',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: false,\r\n        posts: [\r\n            { id: 0, message: \"DH is one of the best serials\", likes: 25 },\r\n            { id: 1, message: \"New song...That's good!\", likes: 122 },\r\n        ],\r\n        messages: [\r\n            { id: 0, message: \"Have a great day!\"},\r\n        ],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Cameron',\r\n        aboutMe: 'У меня вышел новый альбом!!!',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: false,\r\n        posts: [\r\n            { id: 0, message: \"Have a great day!!!\", likes: 15 },\r\n        ],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Adrianne',\r\n        aboutMe: 'Каждый день прыгю с парашютом, присоединяйтесь',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: false,\r\n        posts: [\r\n            { id: 0, message: \"American atmosphere\", likes: 213 },\r\n            { id: 1, message: \"Don't drink coffee\", likes: -5 },\r\n            { id: 2, message: \"Last post wasn't mine\", likes: 5 },\r\n        ],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Robert',\r\n        aboutMe: 'Снял 3 фильма, из них 4 получили оскара :)',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: false,\r\n        followed: true,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Alan',\r\n        aboutMe: 'Физкульт привет, кому составить план тренировок - пишите в личку',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: false,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Hugh',\r\n        aboutMe: 'Бесконечность не предел !!!',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: false,\r\n        followed: true,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Amanda',\r\n        aboutMe: 'Люблю рисовать, сегодня отличная погода для пейзажа',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: false,\r\n        followed: false,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Justin',\r\n        aboutMe: 'Умение перелезать через заборы - показатель интеллекта',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: false,\r\n        followed: true,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Peter',\r\n        aboutMe: 'С наступающим моим днём рождения ;)',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: true,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Max',\r\n        aboutMe: 'Области тьмы один из лучших сериалов, всем советую!!!',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: true,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n    {\r\n        id: 11,\r\n        name: 'John',\r\n        aboutMe: 'Так сладок мед, что, наконец, он горек. Избыток вкуса убивает вкус.',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        followed: true,\r\n        posts: [],\r\n        messages:[],\r\n        isMainUser: false,\r\n    },\r\n];","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { getIsAuth } from '../components/common/Selectors/auth-selectors';\r\nimport { StateType } from '../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent:React.FC<MapStateToPropsType > = (props) => {\r\n\r\n        let {isAuth, ...restProps} = props;\r\n\r\n        if (!isAuth) return <Redirect to='/login' />\r\n        \r\n        return <WrappedComponent {...restProps as WCP} />\r\n        \r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapStateToPropsType, {}, WCP, StateType>(mapStateToProps)(RedirectComponent);\r\n    \r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\nlet mapStateToProps = (state: StateType):MapStateToPropsType => ({\r\n    isAuth: getIsAuth(state),\r\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__bzq2P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"Profile_mainContent__1MJKN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"person\":\"Person_person__24vZz\",\"personTopimg\":\"Person_personTopimg__3zpo1\",\"personData\":\"Person_personData__3TPmN\",\"personDataAva\":\"Person_personDataAva__2h547\",\"personDataDesc\":\"Person_personDataDesc__32VL8\",\"personDataDescName\":\"Person_personDataDescName__3O5Tc\",\"personStatus\":\"Person_personStatus__TzxDq\",\"personDataDescDesc\":\"Person_personDataDescDesc__3tEO6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__lwz7a\",\"list\":\"NavBar_list__g3V38\",\"friends\":\"NavBar_friends__3HgJH\",\"friendsHeader\":\"NavBar_friendsHeader__14srN\",\"friendsItems\":\"NavBar_friendsItems__14nHo\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","let authData = [\r\n    {\r\n        name: \"Malik Khubiev\",\r\n        email: 'malik.hubiev@mail.ru',\r\n        password: 'qwerty',\r\n        rememberMe: false,\r\n    },\r\n];\r\n\r\nexport default authData;","import { FormDataType } from './../types/types';\r\nimport authData from \"../DATA/authDATA\";\r\n\r\nexport const authAPI = {\r\n    logIn(loginData:FormDataType, callBack:Function) {\r\n        let counter = 0;\r\n        authData.map(obj => {\r\n            if (obj.email === loginData.email && obj.password === loginData.password) {\r\n                callBack(true, obj.name);\r\n            } else {\r\n                counter++;\r\n            }\r\n        });\r\n        if (counter === authData.length) {\r\n            callBack('Wrong Email or Password');\r\n        }\r\n    }\r\n}","import { authAPI } from './../api/auth-api';\r\nimport { ThunkType, InferActionsTypes } from './redux-store';\r\nimport { stopSubmit } from 'redux-form';\r\nimport { FormDataType } from '../types/types';\r\n\r\nconst SET_AUTH_USER_DATA:string = 'SET-AUTH-USER-DATA';\r\nconst REM_AUTH_USER_DATA:string = 'REM-AUTH-USER-DATA';\r\nconst SET_FIVE:string = 'SET-FIVE';\r\n\r\nlet initialState = {\r\n    name: null as string | null,\r\n    email: null as string | null,\r\n    password: null as string | null,\r\n    isAuth: false,\r\n}\r\nexport type InitialStateType = typeof initialState;\r\n\r\nexport const authReducer = (state = initialState, action:ActionsTypes):InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                ...action.data,\r\n                isAuth: true,\r\n            }\r\n        };\r\n        case REM_AUTH_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                isAuth: false,\r\n            }\r\n        };\r\n        case SET_FIVE: {\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                isAuth: action.num,\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    setAuthUserData: (data:CredentialsType) => \r\n        ({ type: SET_AUTH_USER_DATA, data } as const),\r\n    remAuthUserData: () => ({ type: REM_AUTH_USER_DATA } as const ),\r\n}\r\n\r\ntype CredentialsType = {\r\n    email: string,\r\n    password: string,\r\n    name: string\r\n}\r\nexport const LoginSanka = (formData:FormDataType):ThunkType<ActionsTypes> => (dispatch) => {\r\n    let result:boolean | undefined;\r\n    let name:string | undefined;\r\n    function callBack(prom:boolean, userName:string) {\r\n        result = prom;\r\n        name = userName;\r\n    }\r\n    authAPI.logIn(formData, callBack);\r\n    if (result === true) {\r\n        if(typeof name === 'string'){\r\n            let credentials:CredentialsType = {\r\n                email: formData.email,\r\n                password: formData.password,\r\n                name: formData.email\r\n            }\r\n            dispatch(actions.setAuthUserData(credentials));\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit('login', { _error: result }));\r\n    }\r\n}\r\n\r\nexport const LogoutSanka = ():ThunkType<ActionsTypes> => (dispatch) => {\r\n    dispatch(actions.remAuthUserData());\r\n}","import { FriendsType } from './../types/types';\r\n\r\nlet initialState = {\r\n    friends: [\r\n        { id: 1, name: \"Andrey\" },\r\n        { id: 2, name: \"Zabit\" },\r\n        { id: 3, name: \"Khabib\" }\r\n    ] as Array<FriendsType>\r\n}\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsTypes = any\r\n\r\nexport const navbarReducer = (state:InitialStateType = initialState, action:ActionsTypes):InitialStateType => {\r\n    return state;\r\n}","import { authReducer } from './auth-reducer';\r\nimport { navbarReducer } from './navbar-reducer';\r\nimport { profileReducer } from './profile-reducer';\r\nimport { Action, applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport { dialogsReducer } from './dialogs-reducer';\r\nimport { usersReducer } from './users-reducer';\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    navbarPage: navbarReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n});\r\n\r\ntype ReducersType = typeof reducers;\r\nexport type StateType = ReturnType<ReducersType>;\r\n\r\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args:any[]) => infer U}?U:never;\r\n\r\nexport type ThunkType<AT extends Action<any>> = ThunkAction<void, StateType, unknown, AT>;\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\nexport type StoreType = typeof store;\r\n\r\nexport default store;","export default __webpack_public_path__ + \"static/media/logo.3597d19d.png\";","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { LogoutSanka } from '../../redux/auth-reducer'\r\nimport { getIsAuth, getUserName } from '../common/Selectors/auth-selectors'\r\nimport logo from './../../images/logo.png'\r\nimport h from './Header.module.css'\r\n\r\nexport const Header: React.FC<{}> = (props) => {\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const myLogout = () => {\r\n        dispatch(LogoutSanka())\r\n    }\r\n\r\n    let isAuth = useSelector(getIsAuth);\r\n    let name = useSelector(getUserName);\r\n\r\n    return (\r\n        <header className={h.header}>\r\n            <img src={logo} alt={'logo'} />\r\n            {isAuth ? <div><p>{name}</p><button onClick={myLogout}>Log out</button></div> : <NavLink to='/login'><p>Log in</p></NavLink>} \r\n        </header>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { FilterType, getUsers } from '../../redux/users-reducer'\r\nimport { Header } from './Header'\r\n\r\nexport const HeaderComponent: React.FC<{}> = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const myGetUsers = (pageNumber: number, filter: FilterType | {}) => {\r\n        dispatch(getUsers(pageNumber, filter))\r\n    }\r\n\r\n    useEffect(() => {\r\n        myGetUsers(1, {});\r\n    }, [])\r\n\r\n    return (\r\n        <Header />\r\n    )\r\n}","export type ValidatorsType = (value: string) => string | undefined;\r\n\r\nexport const required:ValidatorsType = (value) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:number):ValidatorsType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","import React from 'react';\r\nimport { Field, WrappedFieldProps } from 'redux-form';\r\nimport styles from './FormsControlls.module.css';\r\nimport {ValidatorsType} from './../../../utils/validators';\r\n\r\nexport const Input:React.FC<WrappedFieldProps> = ({ input, meta, ...props }) => {\r\n    const hasError:boolean | string = meta.touched && meta.error;\r\n    return (\r\n        <div className={hasError?styles.error:styles.formDiv}>\r\n            <input {...input} {...props} />\r\n            {hasError?<span>{meta.error}</span>:null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Checkbox:React.FC<WrappedFieldProps> = ({ input, meta, ...props }) => {\r\n    return (\r\n        <div className={styles.formDiv}>\r\n            Remember me?\r\n            <input className={styles.checkbox} type='checkbox' {...input} {...props} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function createField<T extends string>(placeholder: string | undefined, \r\n                                            name: T,\r\n                                            validate: Array<ValidatorsType>,\r\n                                            component: React.FC<WrappedFieldProps>){\r\n    return (\r\n        <Field placeholder={placeholder} name={name} validate={validate} component={component} />\r\n    )\r\n}","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { LoginSanka } from '../../redux/auth-reducer'\r\nimport { FormDataType } from '../../types/types'\r\nimport { required } from '../../utils/validators'\r\nimport { Checkbox, createField, Input } from '../common/FormsControlls/FormsControlls'\r\nimport { getIsAuth } from '../common/Selectors/auth-selectors'\r\nimport style from './Login.module.css'\r\n\r\ntype NamesTypes = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype AllNameTypes = keyof NamesTypes;\r\n\r\nconst LoginForm:React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AllNameTypes>('Email', 'email', [required], Input)}\r\n            </div>\r\n            <div>\r\n                {createField<AllNameTypes>('Password', 'password', [required], Input)}\r\n            </div>\r\n            <div>\r\n                {createField<AllNameTypes>('', 'rememberMe', [], Checkbox)}\r\n                </div>\r\n            <div>\r\n                <button>Log in</button>\r\n            </div>\r\n            <div className={style.summaryError}>\r\n                {props.error?<p>{props.error}</p>:''}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm) \r\n\r\nexport const Login:React.FC<{}> = (props) => {\r\n\r\n    let isAuth = useSelector(getIsAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let mySubmit = (formData:FormDataType) => {\r\n        dispatch(LoginSanka(formData))\r\n    }\r\n\r\n    if(isAuth){\r\n        return <Redirect to='/profile' />\r\n    }\r\n\r\n    return (\r\n        <div className={style.sectionLogin}>\r\n            <p>Login</p>\r\n            <p>Hint:</p>\r\n            <p>email: malik.hubiev@mail.ru</p>\r\n            <p>password: qwerty</p>\r\n            <LoginReduxForm onSubmit={mySubmit} />\r\n        </div>\r\n    )\r\n}","import { StateType } from \"../../../redux/redux-store\";\r\n\r\nexport const getFriends = (state:StateType) => {\r\n    return state.navbarPage.friends\r\n}","import React from 'react'\r\nimport f from './FriendsItem.module.css'\r\n\r\ntype PropsType = {\r\n    name: string,\r\n}\r\nexport const FriendsItem:React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={f.friendsItem}>\r\n            <div className={f.friendsItemImg}></div>\r\n            <p className={f.friendsItemName}>{props.name}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { getFriends } from '../common/Selectors/navbar-selectors'\r\nimport { FriendsItem } from './FriendsItem/FriendsItem'\r\nimport n from './NavBar.module.css'\r\n\r\nexport const NavBar: React.FC<{}> = (props) => {\r\n    \r\n    let friends = useSelector(getFriends)\r\n    let friendsElements = friends.map(f => <FriendsItem key={f.id} name={f.name} />)\r\n    \r\n    return (\r\n        <nav className={n.nav}>\r\n            <ul className={n.list}>\r\n                <NavLink activeClassName={n.newCl} to=\"/profile\"><li>Profile</li></NavLink>\r\n                <NavLink activeClassName={n.newCl} to=\"/dialogs\"><li>Dialogs</li></NavLink>\r\n                <NavLink activeClassName={n.newCl} to=\"/users\"><li>Users</li></NavLink>\r\n            </ul>\r\n            <div className={n.friends}>\r\n                <p className={n.friendsHeader}>Friends</p>\r\n                <div className={n.friendsItems}>\r\n                    {friendsElements}\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from 'react'\r\nimport p from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    likes: number\r\n    message: string\r\n}\r\nexport const Post:React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={p.postsPost}>\r\n            <div className={p.postsPostImg}></div>\r\n            <p className={p.postsPostTxt}>{props.message}</p>\r\n            <p className={p.postsPostLike}>like: {props.likes}</p>\r\n        </div>\r\n    )\r\n}","import { Field, Form, Formik } from 'formik'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addPost } from '../../../redux/profile-reducer'\r\nimport { getIsMainUser, getPosts } from '../../common/Selectors/profile-selectors'\r\nimport p from './MyPosts.module.css'\r\nimport { Post } from './Post/Post'\r\n\r\ntype FormDataType = {\r\n    postText: string\r\n}\r\n\r\ntype myAddPost = ({postText}:{postText:string}) => void\r\n\r\nconst AddNewPostForm: React.FC<{myAddPost: myAddPost}> = (props) => {\r\n    const submit = (values: FormDataType, { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }): void => {\r\n        props.myAddPost({postText: values.postText})\r\n        setSubmitting(false)\r\n    }\r\n    return (\r\n        <Formik\r\n            initialValues={{ postText: \"\" }}\r\n            onSubmit={submit}\r\n        >\r\n            {({ isSubmitting }) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"postText\" placeholder=\"tell the World about something...\" />\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Add post\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport const MyPosts: React.FC<{}> = (props) => {\r\n    let posts = [...useSelector(getPosts)]\r\n    let isMainUser = useSelector(getIsMainUser)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const myAddPost = ({postText} : {postText: string}) => {\r\n        dispatch(addPost(postText))\r\n    }\r\n\r\n    let postsElements = posts.reverse().map(p => <Post key={p.id} likes={p.likes} message={p.message} />)\r\n\r\n    return (\r\n        <div className={p.postsArea}>\r\n            {isMainUser ? <div className={p.postsMenu}>\r\n                <p className={p.postsMenuHeader}>My posts</p>\r\n                <AddNewPostForm myAddPost={myAddPost} />\r\n            </div> : null}\r\n            <div className={p.posts}>\r\n                {postsElements.length ? postsElements : <p className={p.postsHeader}>This user has not posted anything</p>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/brain.87fe3c8f.jpg\";","import React, { ChangeEvent, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { changeStatus } from '../../../redux/profile-reducer'\r\nimport { getStatus } from '../../common/Selectors/profile-selectors'\r\nimport person from './Person.module.css'\r\n\r\nexport const PersonStatus: React.FC<{}> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [status, setStatus] = useState<string>(useSelector(getStatus))\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const changeLocalStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let text: string = e.target.value\r\n        setStatus(text)\r\n    }\r\n\r\n    const activateEditMode = () => { setEditMode(true) }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        dispatch(changeStatus(status))\r\n    }\r\n\r\n    return (\r\n        <div className={person.personStatus}>\r\n            {editMode === false ?\r\n                <div>\r\n                    <p onDoubleClick={activateEditMode}>{status}</p>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onChange={changeLocalStatus} autoFocus={true} onBlur={deActivateEditMode} value={status} />\r\n                </div>}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { getProfile } from '../../common/Selectors/profile-selectors'\r\nimport ava from './../../../images/brain.jpg'\r\nimport person from './Person.module.css'\r\nimport { PersonStatus } from './PersonStatus'\r\n\r\nexport const Person:React.FC<{}> = (props) => {\r\n\r\n    let profile = useSelector(getProfile)\r\n\r\n    return (\r\n        <div className={person.person}>\r\n            <div className={person.personTopimg}></div>\r\n            <div className={person.personData}>\r\n                <img src={ava} alt={'avatar'} className={person.personDataAva}/>\r\n                <div className={person.personDataDesc}>\r\n                    <p className={person.personDataDescName}>{profile.name}</p>\r\n                    {profile.isMainUser?<PersonStatus />:<p className={person.personDataDescDesc}>{profile.status}</p>}\r\n                    <div className={person.personDataDescDesc}><b>Обо мне:</b> {profile.aboutMe}</div>\r\n                    <div className={person.personDataDescDesc}><b>Сведения о работе:</b>{profile.lookingForAJob ? <p className={person.personDataDescDesc}>В поиске работы</p> : <p className={person.personDataDescDesc}>У меня отличная работа</p>}</div>\r\n                    <div className={person.personDataDescDesc}><b>Образование:</b> RSEU Rinh</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { MyPosts } from './MyPosts/MyPosts'\r\nimport { Person } from './Person/Person'\r\n\r\nexport const Profile: React.FC<{}> = (props) => {\r\n    return (\r\n        <>\r\n            <Person />\r\n            <MyPosts />\r\n        </>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useRouteMatch, withRouter } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { getUser } from '../../redux/profile-reducer'\r\nimport { Profile } from './Profile'\r\nimport p from './Profile.module.css'\r\n\r\nexport const ProfileComponent: React.FC<{}> = (props) => {\r\n    \r\n    // @ts-ignore\r\n    let userId: string | undefined = useRouteMatch().params.userId\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const myGetUser = (userId: number | string) => { dispatch(getUser(userId)) }\r\n\r\n    useEffect(() => {\r\n        if (userId !== undefined) {\r\n            myGetUser(userId)\r\n        } else {\r\n            myGetUser('-1')\r\n        }\r\n    }, [userId])\r\n\r\n    return (\r\n        <div className={p.mainContent}>\r\n            <Profile />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect\r\n)(ProfileComponent)","import React from 'react';\r\n\r\nexport function withSuspense <WCP>(WrappedComponent:React.ComponentType<WCP>) {\r\n    return (props:WCP) => (\r\n        <React.Suspense fallback={<div>...Loading</div>}>\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    )\r\n}","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport './App.css';\r\nimport { HeaderComponent } from './components/Header/HeaderComponent';\r\nimport { Login } from './components/Login/Login';\r\nimport { NavBar } from './components/NavBar/NavBar';\r\nimport { ProfileComponent } from './components/Profile/ProfileComponent';\r\nimport { withSuspense } from './hoc/withSuspense';\r\nimport store from './redux/redux-store';\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst UsersComponent = React.lazy(() => import('./components/Users/UsersComponent'));\r\n\r\nlet DialogsContainerComp = withSuspense(DialogsContainer);\r\nlet UsersComponentComp = withSuspense(UsersComponent);\r\n\r\nconst App: React.FC<{}> = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <div className=\"appWrapper\">\r\n          <HeaderComponent />\r\n          <div className=\"double\">\r\n            <NavBar />\r\n            <Switch>\r\n              <Route exact path='/' render={() => <Redirect to='/profile' />} />\r\n              <Route path='/login' render={() => <Login />} />\r\n              <Route path='/profile/:userId?' render={() => <div className='rightSide'><ProfileComponent /></div>} />\r\n              <Route path='/dialogs/:userId?' render={() => <DialogsContainerComp />} />\r\n              <Route path='/users' render={() => <UsersComponentComp />} />\r\n              <Route path='*' render={() => <div className='rightSide'>404 Not found</div>} />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </Provider>\r\n    </HashRouter>\r\n  );\r\n}\r\nexport default App;","import * as serviceWorker from './serviceWorker';\r\nimport store from './redux/redux-store';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nlet rerenderEntireTree = (state) => {\r\n  ReactDOM.render(<App />, document.getElementById('root'));\r\n}\r\n\r\nstore.subscribe(() => {\r\n  let state = store.getState();\r\n  rerenderEntireTree(state);\r\n});\r\n\r\nrerenderEntireTree(store.state);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { users as usersData } from './../DATA/usersDATA';\r\nimport { mainUser } from './../DATA/usersDATA';\r\n\r\nexport const profileAPI = {\r\n    addPost(postMessage: string) {\r\n        let message = postMessage;\r\n        let id = mainUser.posts.length;\r\n        mainUser.posts = [...mainUser.posts, { id, message, likes: 100 }];\r\n        return mainUser;\r\n    },\r\n    changeStatus(status: string) {\r\n        mainUser.status = status;\r\n        return mainUser;\r\n    },\r\n    getUser(userId: number | string) {\r\n        let profile;\r\n        usersData.map(user => {\r\n            if (user.id === +userId) profile = user;\r\n        });\r\n        return profile;\r\n    },\r\n    getMainUser() {\r\n        return mainUser;\r\n    },\r\n    sendMessage(id: number, sendedMessage: string) {\r\n        let searchedUser;\r\n        usersData.map(user => {\r\n            if (user.id === id) {\r\n                user.messages.push({ id: user.messages.length, message: sendedMessage });\r\n                searchedUser = user;\r\n            }\r\n        });\r\n        return searchedUser;\r\n    }\r\n}","import { profileAPI } from './../api/profile-api';\r\nimport { ThunkType, InferActionsTypes } from './redux-store';\r\nimport { ProfileType } from './../types/types';\r\n\r\nconst SET_PROFILE: string = 'SET_PROFILE';\r\n\r\ntype InitialStateType = {\r\n    profile: ProfileType\r\n}\r\nlet initialState: InitialStateType = {\r\n    profile: {\r\n        id: -1,\r\n        name: \"Malik\",\r\n        aboutMe: 'Я Front-end разработчик',\r\n        status: \"Double click me!\",\r\n        lookingForAJob: true,\r\n        isMainUser: true,\r\n        posts: [],\r\n        shouldDialogBoxBeOpened: false\r\n    }\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...action.profile,\r\n                    posts: action.profile.posts,\r\n                },\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setProfile: (profile: ProfileType) => { return {type: SET_PROFILE, profile} as const},\r\n}\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\n\r\nexport const sendMessage = (id: number, message: string): ThunkType<ActionsTypes> => (dispatch) => {\r\n    let profile: ProfileType | undefined = profileAPI.sendMessage(id, message);\r\n    if (profile !== undefined) dispatch(actions.setProfile(profile));\r\n}\r\n\r\nexport const changeStatus = (status: string): ThunkType<ActionsTypes> => (dispatch) => {\r\n    let profile: ProfileType | undefined = profileAPI.changeStatus(status);\r\n    dispatch(actions.setProfile(profile));\r\n}\r\n\r\nexport const addPost = (post: string): ThunkType<ActionsTypes> => (dispatch) => {\r\n    let profile: ProfileType | undefined = profileAPI.addPost(post);\r\n    dispatch(actions.setProfile(profile));\r\n}\r\n\r\nexport const getUser = (userId: number | string): ThunkType<ActionsTypes> => (dispatch) => {\r\n    if (userId === '-1') {\r\n        let profile: ProfileType | undefined = profileAPI.getMainUser();\r\n        dispatch(actions.setProfile(profile));\r\n    } else {\r\n        let profile: ProfileType | undefined = profileAPI.getUser(userId);\r\n        if (profile !== undefined) dispatch(actions.setProfile(profile));\r\n    }\r\n}","import { StateType } from './../../../redux/redux-store';\r\n\r\nexport const getProfile = (state:StateType) => {\r\n    return state.profilePage.profile\r\n}\r\n\r\nexport const getStatus = (state:StateType) => {\r\n    return state.profilePage.profile.status\r\n}\r\n\r\nexport const getUserId = (state:StateType) => {\r\n    return state.profilePage.profile.id\r\n}\r\n\r\nexport const getShouldBe = (state:StateType) => {\r\n    return state.profilePage.profile.shouldDialogBoxBeOpened\r\n}\r\n\r\nexport const getMessages = (state:StateType) => {\r\n    return state.profilePage.profile.messages\r\n}\r\n\r\nexport const getPosts = (state: StateType) => {\r\n    return state.profilePage.profile.posts\r\n}\r\n\r\nexport const getIsMainUser = (state: StateType) => {\r\n    return state.profilePage.profile.isMainUser\r\n}\r\n","import {StateType} from '../../../redux/redux-store';\r\n\r\nexport const getIsAuth = (state:StateType) => {\r\n    return state.auth.isAuth;\r\n}\r\n\r\nexport const getUserName = (state:StateType) => {\r\n    return state.auth.name;\r\n}","import { FilterType } from './../redux/users-reducer';\r\nimport { users as usersData } from './../DATA/usersDATA';\r\nimport { UserType } from '../types/types';\r\n\r\nexport const usersAPI = {\r\n    getUsers(filter: FilterType) {\r\n        let firstResultArray: Array<UserType> = [];\r\n        let result: Array<UserType> = [];\r\n        if(filter.friends !== null && filter.friends !== undefined || filter.term !== \"\" && filter.term !== undefined){\r\n            if(filter.friends !== null && filter.friends !== undefined && filter.term !== undefined && filter.term !== \"\"){\r\n                usersData.map(user => user.followed === filter.friends ? firstResultArray.push(user) : 0)\r\n                firstResultArray.map(user => {\r\n                    if (user.name.includes(filter.term)) result.push(user)\r\n                })\r\n                return result\r\n            }else if(filter.friends !== null && filter.friends !== undefined){\r\n                usersData.map(user => user.followed === filter.friends ? result.push(user) : 0)\r\n                return result\r\n            }else{\r\n                usersData.map(user => {\r\n                    if (user.name.includes(filter.term)) result.push(user)\r\n                })\r\n                return result\r\n            }\r\n        } else {\r\n            return usersData\r\n        }\r\n    },\r\n    follow(followedUserId: number) {\r\n        usersData.map(user => user.id === followedUserId ? user.followed = true : 0);\r\n        return usersData;\r\n    },\r\n    unFollow(followedUserId: number) {\r\n        usersData.map(user => user.id === followedUserId ? user.followed = false : 0);\r\n        return usersData;\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsArea\":\"MyPosts_postsArea__2kbRk\",\"postsMenu\":\"MyPosts_postsMenu__26eO-\",\"postsMenuHeader\":\"MyPosts_postsMenuHeader__ZYcGr\",\"postsMenuSend\":\"MyPosts_postsMenuSend__TYUa8\",\"posts\":\"MyPosts_posts__2cD72\",\"postsHeader\":\"MyPosts_postsHeader__2pAf-\",\"postsPost\":\"MyPosts_postsPost__3hMSh\",\"postsPostImg\":\"MyPosts_postsPostImg__seUFn\",\"postsPostTxt\":\"MyPosts_postsPostTxt__2JDn7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formDiv\":\"FormsControlls_formDiv__3V1vY\",\"error\":\"FormsControlls_error__39NrB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsPost\":\"Post_postsPost__2Mha6\",\"postsPostImg\":\"Post_postsPostImg__16oIC\",\"postsPostTxt\":\"Post_postsPostTxt__xpfb-\",\"postsPostLike\":\"Post_postsPostLike__5g5zs\"};","import { InferActionsTypes, ThunkType } from './redux-store';\r\nimport { UserType } from './../types/types';\r\nimport { usersAPI } from '../api/users-api';\r\n\r\nconst SET_USERS: string = 'SET-USERS';\r\nconst SET_TOTAL_USERS_COUNT: string = 'SET-TOTAL-USERS-COUNT';\r\nconst SET_CURRENT_PAGE: string = 'SET-CURRENT-PAGE';\r\nconst TOGGLE_IS_FETCHING: string = 'TOGGLE-IS-FETCHING';\r\nconst SET_FILTER: string = \"SET-FILTER\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType> | [],\r\n    totalUsersCount: 0 as number,\r\n    pageSize: 10 as number,\r\n    currentPage: 1 as number,\r\n    isFetching: true,\r\n    filter: {\r\n        term: \"\",\r\n        friends: null\r\n    } as {\r\n        term: string\r\n        friends: boolean | null\r\n    }\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type FilterType = InitialStateType[\"filter\"];\r\n\r\nexport const usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                users: action.users\r\n            };\r\n        };\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                totalUsersCount: action.totalCount,\r\n            }\r\n        };\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                currentPage: action.pageNumber,\r\n            }\r\n        };\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                isFetching: action.isFetching,\r\n            }\r\n        };\r\n        case SET_FILTER: {\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                filter: action.filter\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setUsers: (users: Array<UserType>) => ({ type: SET_USERS, users }as const),\r\n    setCurrentPage: (pageNumber: number) => ({ type: SET_CURRENT_PAGE, pageNumber }as const),\r\n    setTotalUsersCount: (totalCount: number) => ({ type: SET_TOTAL_USERS_COUNT, totalCount }as const),\r\n    setFilter: (filter: FilterType) => ({type: SET_FILTER, filter} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, isFetching }as const),\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\n\r\nexport const getUsers = (pageNumber: number, filter: FilterType | {}):ThunkType<ActionsTypes> => (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n    let users = usersAPI.getUsers(filter as FilterType);\r\n    dispatch(actions.setUsers(users as Array<UserType>));\r\n    dispatch(actions.setFilter(filter as FilterType));\r\n    if (users) dispatch(actions.setTotalUsersCount(users.length));\r\n    dispatch(actions.setCurrentPage(pageNumber));\r\n    dispatch(actions.toggleIsFetching(false));\r\n}\r\n\r\nexport const follow = (id: number):ThunkType<ActionsTypes> => (dispatch) => {\r\n    let users = usersAPI.follow(id);\r\n    dispatch(actions.setUsers(users));\r\n}\r\n\r\nexport const unFollow = (id: number):ThunkType<ActionsTypes> => (dispatch) => {\r\n    let users = usersAPI.unFollow(id);\r\n    dispatch(actions.setUsers(users));\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendsItem\":\"FriendsItem_friendsItem__2vJ3I\",\"friendsItemImg\":\"FriendsItem_friendsItemImg__22Xmv\",\"friendsItemName\":\"FriendsItem_friendsItemName__2gYOI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionLogin\":\"Login_sectionLogin__P1ryS\",\"rem\":\"Login_rem__1_U5g\",\"summaryError\":\"Login_summaryError__2SyQ5\"};","import { usersAPI } from \"../api/users-api\";\r\nimport { UserType } from \"../types/types\";\r\nimport { InferActionsTypes, ThunkType } from \"./redux-store\";\r\nimport { FilterType } from './users-reducer';\r\n\r\nconst SET_USERS:string = \"SET-USERS\";\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType> | [],\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const dialogsReducer = (state = initialState, action:ActionsTypes): InitialStateType => {\r\n    switch(action.type){\r\n        case SET_USERS: {\r\n            return {\r\n                ...state, \r\n                users: action.users\r\n            };\r\n        };\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setUsers: (users: Array<UserType>) => ({type: SET_USERS, users} as const)\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>; \r\n\r\nexport const getUsers = ():ThunkType<ActionsTypes> => (dispatch) => {\r\n    let users = usersAPI.getUsers({} as FilterType);\r\n    dispatch(actions.setUsers(users as UserType[]));\r\n} "],"sourceRoot":""}